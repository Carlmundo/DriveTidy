<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="txtSampleMusic.Text" xml:space="preserve">
    <value>echo [Windows Sample Music...]
del /f /s /q "%systemdrive%\Users\Public\Music\Sample Music\*.*"
rd /s /q "%systemdrive%\Users\Public\Music\Sample Music\"
del /f /s /q "%systemdrive%\Documents and Settings\All Users\Documents\My Music\Sample Music\*.*"
rd /s /q "%systemdrive%\Documents and Settings\All Users\Documents\My Music\Sample Music\"</value>
  </data>
  <data name="txtSamplePictures.Text" xml:space="preserve">
    <value>echo [Windows Sample Pictures...]
del /f /s /q "%systemdrive%\Users\Public\Pictures\Sample Pictures\*.*"
rd /s /q "%systemdrive%\Users\Public\Pictures\Sample Pictures\"
del /f /s /q "%systemdrive%\Documents and Settings\All Users\Documents\My Pictures\Sample Pictures\*.*"
rd /s /q "%systemdrive%\Documents and Settings\All Users\Documents\My Pictures\Sample Pictures\"</value>
  </data>
  <data name="txtSampleVideos.Text" xml:space="preserve">
    <value>echo [Windows Sample Videos...]
del /f /s /q "%systemdrive%\Users\Public\Videos\Sample Videos\*.*"
rd /s /q "%systemdrive%\Users\Public\Videos\Sample Videos\"
del /f /s /q "%systemdrive%\Users\Public\Recorded TV\Sample Media\*.*"
rd /s /q "%systemdrive%\Users\Public\Recorded TV\Sample Media\"</value>
  </data>
  <data name="txtAdobeReader.Text" xml:space="preserve">
    <value>echo [Adobe Reader cache...]
:Adobe Cache
IF NOT EXIST "%localappdata%\Adobe\Acrobat" GOTO AdobeSetup
pushd "%localappdata%\Adobe\Acrobat" ||goto :eof
for /d %%a in (*) do (
del /f /s /q "%%a\Cache\*.*"
rd /s /q "%%a\Cache\"
)
popd

:AdobeSetup
IF NOT EXIST "%programfiles%\Adobe" GOTO AdobeSetup32on64
pushd "%programfiles%\Adobe" ||goto :eof
for /d %%a in (Reader*) do (
del /f /s /q "%%a\Setup Files\*.*"
rd /s /q "%%a\Setup Files\"
)
for /d %%a in (Acrobat*) do (
del /f /s /q "%%a\Setup Files\*.*"
rd /s /q "%%a\Setup Files\"
)
popd

:AdobeSetup32on64
IF NOT EXIST "%programfiles(x86)%\Adobe" GOTO AdobeSetup2
pushd "%programfiles(x86)%\Adobe" ||goto :eof
for /d %%a in (Reader*) do (
del /f /s /q "%%a\Setup Files\*.*"
rd /s /q "%%a\Setup Files\"
)
for /d %%a in (Acrobat*) do (
del /f /s /q "%%a\Setup Files\*.*"
rd /s /q "%%a\Setup Files\"
)
popd

:AdobeSetup2
IF NOT EXIST "%localappdata%\Adobe" GOTO End_AdobeReader
pushd "%localappdata%\Adobe" ||goto :eof
for /d %%a in (Reader*) do (
del /f /s /q "%%a\Setup Files\*.*"
rd /s /q "%%a\Setup Files\"
)
for /d %%a in (Acrobat*) do (
del /f /s /q "%%a\Setup Files\*.*"
rd /s /q "%%a\Setup Files\"
)
popd
:End_AdobeReader</value>
  </data>
  <data name="txtAppleInstaller.Text" xml:space="preserve">
    <value>echo [Apple Installer cache...]
del /f /s /q "%allusersappdata%\Apple\Installer Cache\*.*"
rd /s /q "%allusersappdata%\Apple\Installer Cache\"
del /f /s /q "%allusersappdata%\Apple Computer\Installer Cache\*.*"
rd /s /q "%allusersappdata%\Apple Computer\Installer Cache\"</value>
  </data>
  <data name="txtAVG.Text" xml:space="preserve">
    <value>echo [AVG logs and temp files...]
pushd "%allusersappdata%" ||goto :eof
for /d %%a in (avg*) do (
del /f /s /q "%%a\Log\*.*"
del /f /s /q "%%a\Emc\Log\*.*"
del /f /s /q "%%a\scanlogs\*.*"
del /f /s /q "%%a\temp\*.*"
del /f /s /q "%%a\update\backup\*.*"
)
popd</value>
  </data>
  <data name="txtGoogleEarth.Text" xml:space="preserve">
    <value>echo [Google Earth cache...]
del /f /q "%appdata%\Google\GoogleEarth\dbCache.dat"
del /f /q "%appdata%\Google\GoogleEarth\dbCache.dat.index"
del /f /q "%localappdata%\Google\GoogleEarth\dbCache.dat"
del /f /q "%localappdata%\Google\GoogleEarth\dbCache.dat.index"
del /f /q "%locallowappdata%\Google\GoogleEarth\dbCache.dat"
del /f /q "%locallowappdata%\Google\GoogleEarth\dbCache.dat.index"</value>
  </data>
  <data name="txtEVEcache.Text" xml:space="preserve">
    <value>echo [EVE cache...]
IF NOT EXIST "%localappdata%\CCP\EVE\" GOTO End_EVEcache
pushd "%localappdata%\CCP\EVE\" ||goto :eof
for /d %%a in (*) do (
del /f /s /q "%%a\cache\*.*"
rd /s /q "%%a\cache\"
)
popd
:End_EVEcache</value>
  </data>
  <data name="txtIMVU.Text" xml:space="preserve">
    <value>echo [IMVU cache...]
del /f /s /q "%appdata%\IMVU\cache\*.*"
rd /s /q "%appdata%\IMVU\cache\"
del /f /s /q "%appdata%\IMVU\AssetCache\*.*"
rd /s /q "%appdata%\IMVU\AssetCache\"
del /f /s /q "%appdata%\IMVU\PixmapCache\*.*"
rd /s /q "%appdata%\IMVU\PixmapCache\"
del /f /s /q "%appdata%\IMVU\*.log"</value>
  </data>
  <data name="txtJagex.Text" xml:space="preserve">
    <value>echo [Jagex cache...]
del /f /q "%userprofile%\jagex_*.dat"
del /f /s /q "%systemdrive%\rscache\*.*"
rd /s /q "%systemdrive%\rscache\"
del /f /s /q "%systemdrive%\.jagex_cache_32\*.*"
rd /s /q "%systemdrive%\.jagex_cache_32\"
del /f /s /q "%systemdrive%\.jagex_cache_64\*.*"
rd /s /q "%systemdrive%\.jagex_cache_64\"
del /f /s /q "%windir%\.jagex_cache_32\*.*"
rd /s /q "%windir%\.jagex_cache_32\"
del /f /s /q "%windir%\.jagex_cache_64\*.*"
rd /s /q "%windir%\.jagex_cache_64\"</value>
  </data>
  <data name="txtKaspersky.Text" xml:space="preserve">
    <value>echo [Kaspersky reports and temp files...]
del /f /s /q "%allusersappdata%\Kaspersky Lab\*.dmp"
del /f /s /q "%allusersappdata%\Kaspersky Lab\*.tmp"
del /f /s /q "%allusersappdata%\Kaspersky Lab\*.log"
del /f /s /q "%allusersappdata%\Kaspersky Lab Setup Files\*.*"
rd /s /q "%allusersappdata%\Kaspersky Lab Setup Files\"
IF NOT EXIST "%allusersappdata%\Kaspersky Lab" GOTO End_Kaspersky
pushd "%allusersappdata%\Kaspersky Lab" ||goto :eof
for /d %%a in (AVP*) do (
del /f /s /q "%%a\*.tmp"
del /f /s /q "%%a\*.dmp"
del /f /s /q "%%a\Bases\Cache\*.*"
rd /s /q "%%a\Bases\Cache\"
del /f /s /q "%%a\Report\*.*"
del /f /s /q "%%a\PdmHist\*.*"
del /f /s /q "%%a\Data\Updater\Temporary Files\*.*"
)
popd
:End_Kaspersky</value>
  </data>
  <data name="txtQuicktime.Text" xml:space="preserve">
    <value>echo [Quicktime downloads...]
del /f /s /q "%localappdata%\Apple Computer\QuickTime\downloads\*.*"
rd /s /q "%localappdata%\Apple Computer\QuickTime\downloads\"
del /f /s /q "%locallowappdata%\Apple Computer\Quicktime\downloads\*.*"
rd /s /q "%locallowappdata%\Apple Computer\Quicktime\downloads\"
del /f /q "%userprofile%\QTPlayerSession.xml"
del /f /q "%appdata%\Apple Computer\QuickTime\QTPlayerSession.xml"
del /f /q  "%localappdata%\Apple Computer\QuickTime\QTPlayerSession.xml"
del /f /q  "%locallowappdata%\Apple Computer\QuickTime\QTPlayerSession.xml"</value>
  </data>
  <data name="txtRealPlayer.Text" xml:space="preserve">
    <value>echo [RealPlayer history and cookies...]
del /f /q "%appdata%\Real\RealPlayer\cookies.txt"
del /f /q "%appdata%\Real\RealPlayer\ctd.dat"
del /f /q "%appdata%\Real\RealPlayer\realplayer.ste"
del /f /s /q "%appdata%\Real\RealPlayer\History\*.*"
del /f /q "%appdata%\Real\RealOne Player\cookies.txt"
del /f /q "%appdata%\Real\RealOne Player\ctd.dat"
del /f /q "%appdata%\Real\RealOne Player\realplayer.ste"
del /f /s /q "%appdata%\Real\RealOne Player\History\*.*"</value>
  </data>
  <data name="txtSilverlight.Text" xml:space="preserve">
    <value>echo [Silverlight cookies...]
del /f /s /q "%localappdata%\Microsoft\Silverlight\*.*"
rd /s /q "%localappdata%\Microsoft\Silverlight\"
del /f /s /q "%locallowappdata%\Microsoft\Silverlight\*.*"
rd /s /q "%locallowappdata%\Microsoft\Silverlight\"</value>
  </data>
  <data name="txtSpotify.Text" xml:space="preserve">
    <value>echo [Spotify cache...]
If Exist "%localappdata%\Spotify\Storage\index.dat" GoTo SpotifyIndexExists
del /f /s /q "%localappdata%\Spotify\Storage\*.*"
rd /s /q "%localappdata%\Spotify\Storage\"

:SpotifyIndexExists
move "%localappdata%\Spotify\Storage\index.dat" "%temp%"
del /f /s /q "%localappdata%\Spotify\Storage\*.*"
move "%temp%\index.dat" "%localappdata%\Spotify\Storage\"</value>
  </data>
  <data name="txtSymantec.Text" xml:space="preserve">
    <value>echo [Symantec caches...]
del /f /s /q "%allusersappdata%\Symantec Temporary Files\*.*"
rd /s /q "%allusersappdata%\Symantec Temporary Files\"
del /f /s /q "%allusersappdata%\Symantec\LiveUpdate\Downloads\*.*"
rd /s /q "%allusersappdata%\Symantec\LiveUpdate\Downloads\"</value>
  </data>
  <data name="txtTrackmania.Text" xml:space="preserve">
    <value>echo [TrackMania cache...]
del /f /s /q "%allusersappdata%\TrackMania\Cache\*.*"
rd /s /q "%allusersappdata%\TrackMania\Cache\"
del /f /s /q "%localappdata%\VirtualStore\ProgramData\TrackMania\Cache\*.*"
rd /s /q "%localappdata%\VirtualStore\ProgramData\TrackMania\Cache\"</value>
  </data>
  <data name="txtUnity.Text" xml:space="preserve">
    <value>echo [Unity Web Player cache...]
del /f /s /q "%localappdata%\Unity\Web Player\Cache\*.*"
rd /s /q "%localappdata%\Unity\Web Player\Cache\"
del /f /s /q "%locallowappdata%\Unity\Web Player\Cache\*.*"
rd /s /q "%locallowappdata%\Unity\Web Player\Cache\"</value>
  </data>
</root>